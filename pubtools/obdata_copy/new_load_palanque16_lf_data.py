# Palanque et al. 2016
# Measuring M_g, to be converted in this code
from data_copy import *
import numpy as np

def load_palanque16_lf_data(z): 
	if (z <= 0.68) or (z > 4.): return False
	elif (z>0.68) and (z<=1.06):	
		z_c = (0.68+1.06)/2.
		M_g=np.array([-26.40 ,-26.00 ,-25.60 ,-25.20 ,-24.80 ,-24.40 ,-24.00 ,-23.60 ,-23.20 ,-22.80 ,-22.40 ,-22.00])
		Nq=np.array([1  , 15 , 36 , 55 , 90 ,165, 182, 304, 314, 319, 243, 161])
		PHI_1450=np.array([-8.13, -6.94, -6.53, -6.32, -6.09,-5.81, -5.76, -5.51, -5.45, -5.39, -5.45, -5.46])
		DPHI_1450=np.array([0.44, 0.12, 0.09, 0.08, 0.07,0.06, 0.06, 0.05, 0.05, 0.05, 0.06, 0.06])
	elif (z>1.06) and (z<=1.44):	
		z_c = (1.06+1.44)/2.
		M_g=np.array([-27.20, -26.80, -26.40, -26.00, -25.60, -25.20, -24.80, -24.40, -24.00, -23.60, -23.20, -22.80])
		Nq=np.array([1  , 11 , 39 , 61 ,103, 156, 236, 346, 391, 425, 428, 288])
		PHI_1450=np.array([-8.20, -7.15, -6.59, -6.39,-6.15, -5.97, -5.78, -5.59, -5.50, -5.42, -5.34, -5.35])
		DPHI_1450=np.array([0.44, 0.14, 0.08, 0.07,0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05])
	elif (z>1.44) and (z<=1.82):	
		z_c = (1.44+1.82)/2.
		M_g=np.array([-27.60, -27.20, -26.80, -26.40, -26.00, -25.60, -25.20, -24.80, -24.40, -24.00, -23.60, -23.20])
		Nq=np.array([8   ,29  ,51  ,94 ,131 ,197 ,337 ,388 ,427 ,487 ,468 ,370])
		PHI_1450=np.array([-7.32, -6.76, -6.51, -6.25,-6.10, -5.92, -5.68, -5.59, -5.52, -5.42, -5.36, -5.30])
		DPHI_1450=np.array([0.16, 0.09, 0.08, 0.07,0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05])
	elif (z>1.82) and (z<=2.20):	
		z_c = (1.82+2.20)/2.
		M_g=np.array([-28.00, -27.60, -27.20, -26.80, -26.40, -26.00, -25.60, -25.20, -24.80, -24.40, -24.00, -23.60])
		Nq=np.array([4  ,21 , 41 , 83 ,119, 178, 287, 300, 385, 439, 438, 246])
		PHI_1450=np.array([-7.63,-6.91, -6.63, -6.33,-6.17, -5.99, -5.77, -5.73, -5.60, -5.50, -5.41, -5.49])
		DPHI_1450=np.array([0.22,0.11, 0.08, 0.07,0.06, 0.06, 0.05, 0.05, 0.05, 0.05, 0.05, 0.06])
	elif (z>2.20) and (z<=2.60):	
		z_c = (2.20+2.60)/2.
		M_g=np.array([-28.40, -28.00, -27.60, -27.20, -26.80, -26.40, -26.00, -25.60, -25.20, -24.80, -24.40, -24.00])
		Nq=np.array([2  , 6  ,25 , 41 , 79 ,125, 132, 192, 267, 337, 282, 230])
		PHI_1450=np.array([-7.98, -7.49,-6.88, -6.67, -6.39,-6.18, -6.15, -5.96, -5.79, -5.66, -5.67, -5.62])
		DPHI_1450=np.array([0.31, 0.18,0.10, 0.08, 0.07,0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.06])
	elif (z>2.60) and (z<=3.00):	
		z_c = (2.60+3.00)/2.
		M_g=np.array([-28.40, -28.00, -27.60, -27.20, -26.80, -26.40, -26.00, -25.60, -25.20, -24.80, -24.40])
		Nq=np.array([7  , 15 , 20 , 31 , 52 , 91 ,124, 151, 177, 169, 140])
		PHI_1450=np.array([-7.42, -7.10, -6.99, -6.80, -6.57, -6.32,-6.16, -6.05, -5.93, -5.88, -5.81])
		DPHI_1450=np.array([0.17, 0.12, 0.11, 0.09, 0.08, 0.07,0.06, 0.06, 0.06, 0.06, 0.06])
	elif (z>3.00) and (z<=3.50):	
		z_c = (3.00+3.50)/2.
		M_g=np.array([-28.40, -28.00, -27.60, -27.20, -26.80, -26.40, -26.00, -25.60, -25.20, -24.80])
		Nq=np.array([3  , 11 , 11 , 13 , 41 , 61 , 85 ,105, 69 , 53])
		PHI_1450=np.array([-7.89, -7.33, -7.33, -7.26, -6.75, -6.55, -6.37,-6.19, -6.23, -6.10])
		DPHI_1450=np.array([0.26, 0.14, 0.14, 0.13, 0.08, 0.07, 0.07,0.06, 0.07, 0.08])
	elif (z>3.50) and (z<=4.00):	
		z_c = (3.50+4.00)/2.
		M_g=np.array([-28.80, -28.40, -28.00, -27.20, -26.80, -26.40])
		Nq=np.array([1,1,1,7,13,25])
		PHI_1450=np.array([-8.34,-8.35,-8.36,-7.49, -7.17, -6.71])
		DPHI_1450=np.array([0.44,0.44,0.44,0.17, 0.13, 0.10])
 
	M_1450 = M_g + 1.233 #see kk18
	M_1450 = M_1450 - 2.5*np.log10(lum_correct_cosmo_flexible(z_c, 0.6935, 0.3065))
	PHI_1450 = PHI_1450 + np.log10(phi_correct_cosmo_flexible(z_c, 0.6935, 0.3065))

	return M_1450, PHI_1450, DPHI_1450

