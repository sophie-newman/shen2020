# 
# Ebrero et al. 2009
# hard Xray and soft Xray
#
from data_copy import *
import numpy as np 

def load_ebrero09_HX_lf_data(z): # L_HX, PHI_HX, DPHI_HX
	if ((z <= 0.01) or (z > 3)): return False
	elif (z<=0.5) and (z>0.01):
		L_HX = np.array([42.25,42.75,43.25,43.75,44.25,44.75])
		P_HX = np.log10(np.array([7.2220349476980418E-05,6.2779248371016384E-05,
			2.2952833374103097E-05,7.0211127749573941E-06,9.9473250649362491E-07,3.5370082706081483E-07]))
		sigma = np.array([3.2297922157863924E-05,1.7411830695137592E-05,4.8935605177497426E-06,
			1.3769535017939745E-06,2.5683882877206465E-07,9.4530522305725016E-08])
	elif (z<=1.0) and (z>0.5):
		L_HX = np.array([41.8333333333333357,42.5000000000000000,43.1666666666666714,43.8333333333333357,
			44.5000000000000000,45.1666666666666714])
		P_HX = np.log10(np.array([7.7079041522236001E-04,2.4771405876260693E-04,2.0621397119723240E-04,
			2.2801981201093249E-05,2.1139887427798103E-06,6.3853180482620726E-08]))
		sigma = np.array([2.1377879728618450E-04,4.3790072686570568E-05,3.4368995199538732E-05,4.0953567204311960E-06,
			4.3151614514985435E-07,2.2575508459794811E-08])
	elif (z<=2.0) and (z>1.0):
		L_HX = np.array([42.5333333333333385,43.2000000000000028,43.8666666666666742,44.5333333333333385,
			45.2000000000000028,45.8666666666666742])
		P_HX = np.log10(np.array([1.2484617157258518E-04,7.0965252520745764E-05,3.8719470468935700E-05,
			1.0978891597720691E-05,2.4671686173325103E-07,8.3576318296536222E-09]))
		sigma = np.array([4.1615390524195061E-05,1.2170440401588758E-05,7.4515655660399306E-06,
			1.6940797523989661E-06,7.4387932711198716E-08,4.1788159148268111E-09])
	elif (z<=3.0) and (z>2.0):
		L_HX = np.array([43.1199999999999974,43.7599999999999980,44.3999999999999986,
			45.0399999999999991,45.6799999999999997])
		P_HX = np.log10(np.array([4.7261818148720728E-05,4.4784475724835695E-05,1.1182720416712068E-05,
			5.9744346752128156E-07,4.3246044324555705E-08]))
		sigma = np.array([2.3630909074360364E-05,8.7829582933445999E-06,3.7275734722373556E-06,
			3.4493414679899534E-07,3.0579571201387343E-08])

	P_HX_up  = np.log10(10**P_HX+sigma)
	P_HX_down= np.log10(10**P_HX-sigma)
	D_HX = (P_HX_up - P_HX_down)/2.
	L_HX = (L_HX - L_solar) 
	PHI_HX  = P_HX
	DPHI_HX = D_HX

	PHI_HX = PHI_HX + absorption_correction_xray(L_HX, z)
	return L_HX, PHI_HX, DPHI_HX
 
def load_ebrero09_SX_lf_data(z): # L_SX, PHI_SX, DPHI_SX
	if ((z <= 0.01) or (z > 3)): return False
	elif (z<=0.5) and (z>0.01):
		L_SX = np.array([40.5,41.5,42.5,43.5,44.5,45.5])
		P_SX = np.log10(np.array([2.7905160705912985E-04,  6.1743569124893746E-05,  5.1199877138322907E-05,  
  			4.3357690961125442E-06,  1.3262042428189109E-07,  8.4071089460222946E-10]))
		sigma = np.array([1.2479567252295491E-04,2.0581189708297918E-05,5.4892030062151032E-06,
			3.1129007964366574E-07,1.2942428173116294E-08,1.5349210710466307E-10])
	elif (z<=1.0) and (z>0.5):
		L_SX = np.array([41.00,42.00,43.00,44.00,45.00,46.00])
		P_SX = np.log10(np.array([5.9582889700183171E-04,1.4177397408676482E-04,4.7538206156653338E-05,
			1.8244107012356279E-06,7.4934450579766202E-09,2.9149181306772316E-10]))
		sigma = np.array([1.2703114766616374E-04,2.2416433552393354E-05,8.8276232685901508E-06,
			1.7395073510474884E-07,5.2986658149440891E-09,9.2177804858603819E-11])
	elif (z<=2.0) and (z>1.0):
		L_SX = np.array([41.50,42.50,43.50,44.50,45.50,46.50])
		P_SX = np.log10(np.array([1.5591088720507738E-04,4.8439931253669788E-05,1.6052394551833704E-05,1.1573409794502052E-06,
			3.5379142864555874E-09,9.8888498389436806E-11]))
		sigma = np.array([4.3241899863152988E-05,7.2209986072414846E-06,3.0336174236600083E-06,9.6781714691901478E-08,
			2.0426157656549564E-09,5.7093301164899204E-11])
	elif (z<=3.0) and (z>2.0):
		L_SX = np.array([42.6875,44.0625,45.4375,46.8125])
		P_SX = np.log10(np.array([3.8931448493205055E-05,2.7136760166362829E-06,5.5651623734181988E-09,2.1842080279185505E-10]))
		sigma = np.array([6.4885747488675094E-06,6.2255997484355561E-07,1.7598588648670007E-09,1.2610530928849166E-10])

	P_SX_up  = np.log10(10**P_SX+sigma)
	P_SX_down= np.log10(10**P_SX-sigma)
	D_SX = (P_SX_up - P_SX_down)/2.
	L_SX = (L_SX - L_solar) 
	PHI_SX  = P_SX
	DPHI_SX = D_SX
	return L_SX, PHI_SX, DPHI_SX
  
