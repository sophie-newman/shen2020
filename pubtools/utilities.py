### a python file that includes all the useful functions/models of this project
# pieces of cdoes from other places of the repository are copied here

from data_copy import *
from astropy.cosmology import FlatLambdaCDM
import astropy.constants as con
import numpy as np
from scipy.optimize import fsolve

import numpy as np 
from lf_shape_copy import *
import scipy.interpolate as inter
from scipy.optimize import curve_fit
from scipy.optimize import minimize
from scipy.optimize import least_squares
from ctypes import *
import ctypes

##Section 1: the bolometric correction
#codes to load the bolometric corrections and their dispersions as a function of bolometric luminosity

def bolometric_correction(L_bol,nu):  #L_bol is in log10 and is in unit of solar luminosity  
	x = L_bol - 10.
	if nu==0.: return L_bol
	elif nu < 0:
		if (nu== -1.): P0, P1, P2, P3 =3.75876730, -0.36057087, 9.82954354, -6.29078046e-3   #B band
		if (nu== -2.): P0, P1, P2, P3 =4.36089518, -0.36057086, 11.4041656, -6.29077790e-3   #IR 15micron
		if (nu== -3.): P0, P1, P2, P3 =5.71209149, -0.02553868, 17.6679057,     0.27750559   #soft Xray
		if (nu== -4.): P0, P1, P2, P3 =4.07349835, -0.02553868, 12.5996205,     0.27750559   #hard Xray
		if (nu== -5.): P0, P1, P2, P3 =4.86961646, -0.00629077, 1.86211735,    -0.36057082   #FUV
		lband = P0 * np.power(10.,P1*x) + P2*np.power(10.,P3*x)
		return L_bol - np.log10(lband) 
	#if not one of the specified bands, then take advantage of the fact that our model 
	#   spectrum is not l-dependent below 500 angstroms or above 50 angstroms, so 
	#   just take the appropriate ratios to renormalize to those luminosities
	nu_angstrom = con.c.value/1e-10
	nu500 = nu_angstrom/500.
	nu50 = nu_angstrom/50.
	if (nu <= nu500): #just take the ratio relative to B-band
		P = (3.75876730,-0.36057087,9.82954354,-6.29078046e-3)
		lband = P[0]*np.power(10.,P[1]*x) + P[2]*np.power(10.,P[3]*x)
		return np.log10(return_ratio_to_b_band(nu)) + L_bol - np.log10(lband)
	elif (nu >= nu50): #just take the ratio relative to the hard X-rays
		P = (4.07349835,-0.02553868,12.5996205,0.27750559)
		lband = P[0]*np.power(10.,P[1]*x) + P[2]*np.power(10.,P[3]*x)
		return np.log10(return_ratio_to_hard_xray(nu)) + L_bol - np.log10(lband)
	elif (nu > nu500) and (nu < nu50): #interpolate between both regimes
		P = (3.75876730,-0.36057087,9.82954354,-6.29078046e-3)
		L500 = return_ratio_to_b_band(nu500)/(P[0]*np.power(10.,P[1]*x)+P[2]*np.power(10.,P[3]*x))
		Q = (4.07349835,-0.02553868,12.5996205,0.27750559)
		L50  = return_ratio_to_hard_xray(nu50)/(Q[0]*np.power(10.,Q[1]*x)+Q[2]*np.power(10.,Q[3]*x))
		L00  = np.log10(L500) + np.log10(L50/L500) * (np.log10(nu/nu500)/np.log10(nu50/nu500))
		return L00 + L_bol

# inverse of the bolometric correction, used to move data points to the bolometric plane
def bolometric_correction_inverse(L_obs,nu):    #L_obs is in log10 and is in unit of solar luminosity
	def fobjective(L_bol):
		return bolometric_correction(L_bol,nu)-L_obs
	return fsolve(fobjective,x0=L_obs)[0]

#return the lognormal dispersion in bolometric corrections for a given band and luminosity
def fit_func_disp(x,A,B,x0,sig):
	return B+A*norm.cdf(x,loc=x0,scale=sig)

def band_dispersion(L_bol,nu): #L_bol is in log10 and is in unit of solar luminosity 
	x = L_bol + L_solar

	sx_floor = 0.010 #minimum value of dispersion to enforce
	if nu == 0.:  return 0.01
	if nu < 0.:
		if nu==(-1.): P0, P1, P2, P3=-0.3826995, 0.4052673, 42.3866639, 2.3775969
		if nu==(-2.): P0, P1, P2, P3=-0.3380714, 0.4071626, 42.1588292, 2.1928345
        if nu==(-3.): P0, P1, P2, P3=0.07969176, 0.1803728, 44.1641156, 1.4964823
        if nu==(-4.): P0, P1, P2, P3=0.19262562, 0.0659231, 42.9876632, 1.8829639
        if nu==(-5.): P0, P1, P2, P3=-0.3719955, 0.4048693, 42.3073116, 2.3097825
        return fit_func_disp(x, P0, P1, P2, P3)
	# interpolate between the known ranges, and (conservatively) hold constant 
	#   outside of them. roughly consistent with Richards et al. 2006 dispersions, 
	#   but uncertainty in how large the dispersions should be yields ~10% uncertainties 
	#   between 15microns and 10keV, and larger outside those ranges (since the 
	#   dispersions there are poorly determined) -- still, the lognormal dispersions 
	#   vary relatively weakly over observed ranges, so these are probably the 
	#   maximal uncertainties due to this effect
	nu15 = 2.00e13
	nuBB = 6.81818e14
	nuSX = 0.5 * 2.418e17
	nuHX = 10. * 2.418e17
	if (nu < nu15): 
		P0, P1, P2, P3 = -0.3380714, 0.4071626, 42.1588292, 2.1928345 
		return fit_func_disp(x, P0, P1, P2, P3)
	if (nu >=nuHX): 
		P0, P1, P2, P3 = 0.19262562, 0.0659231, 42.9876632, 1.8829639
		return fit_func_disp(x, P0, P1, P2, P3)
	if (nu >= nu15) and (nu< nuBB): 
		P0, P1, P2, P3 = -0.3380714, 0.4071626, 42.1588292, 2.1928345
		sf1 = fit_func_disp(x, P0, P1, P2, P3)
		P0, P1, P2, P3 = -0.3826995, 0.4052673, 42.3866639, 2.3775969
		sf2 = fit_func_disp(x, P0, P1, P2, P3)
		sx = sf1 + (sf2-sf1) * (np.log10(nu/nu15)/np.log10(nuBB/nu15))
		if (sx<=sx_floor): sx=sx_floor
		return sx
	if (nu >= nuBB) and (nu< nuSX): 
		P0, P1, P2, P3 = -0.3826995, 0.4052673, 42.3866639, 2.3775969
		sf1 = fit_func_disp(x, P0, P1, P2, P3)
		P0, P1, P2, P3 = 0.07969176, 0.1803728, 44.1641156, 1.4964823
		sf2 = fit_func_disp(x, P0, P1, P2, P3)
		sx = sf1 + (sf2-sf1) * (np.log10(nu/nu15)/np.log10(nuBB/nu15))
		if (sx<=sx_floor): sx=sx_floor
		return sx
	if (nu >= nuSX) and (nu< nuHX): 
		P0, P1, P2, P3 = 0.07969176, 0.1803728, 44.1641156, 1.4964823
		sf1 = fit_func_disp(x, P0, P1, P2, P3)
		P0, P1, P2, P3 = 0.19262562, 0.0659231, 42.9876632, 1.8829639
		sf2 = fit_func_disp(x, P0, P1, P2, P3)
		sx = sf1 + (sf2-sf1) * (np.log10(nu/nu15)/np.log10(nuBB/nu15))
		if (sx<=sx_floor): sx=sx_floor
		return sx

# load the optical-IR template, based on the observations in text and specifically 
def return_ratio_to_b_band(nu):  #return the luminosity at a given frequency with respect to B band
	log_nu=np.array([    12.50, 12.52, 12.54, 12.56, 12.58, 12.60, 12.62, 12.64, 12.66, 12.68, 
	12.70, 12.72, 12.74, 12.76, 12.78, 12.80, 12.82, 12.84, 12.86, 12.88, 12.90, 12.92, 12.94, 
	12.96, 12.98, 13.00, 13.02, 13.04, 13.06, 13.08, 13.10, 13.12, 13.14, 13.16, 13.18, 13.20, 
	13.22, 13.24, 13.26, 13.28, 13.30, 13.32, 13.34, 13.36, 13.38, 13.40, 13.42, 13.44, 13.46, 
	13.48, 13.50, 13.52, 13.54, 13.56, 13.58, 13.60, 13.62, 13.64, 13.66, 13.68, 13.70, 13.72, 
	13.74, 13.76, 13.78, 13.80, 13.82, 13.84, 13.86, 13.88, 13.90, 13.92, 13.94, 13.96, 13.98, 
	14.00, 14.02, 14.04, 14.06, 14.08, 14.10, 14.12, 14.14, 14.16, 14.18, 14.20, 14.22, 14.24, 
	14.26, 14.28, 14.30, 14.32, 14.34, 14.36, 14.38, 14.40, 14.42, 14.44, 14.46, 14.48, 14.50, 
	14.52, 14.54, 14.56, 14.58, 14.60, 14.62, 14.64, 14.66, 14.68, 14.70, 14.72, 14.74, 14.76, 
	14.78, 14.80, 14.82, 14.84, 14.86, 14.88, 14.90, 14.92, 14.94, 14.96, 14.98, 15.00, 15.02, 
	15.04, 15.06, 15.08, 15.10, 15.12, 15.14, 15.16, 15.18, 15.20, 15.22, 15.24, 15.26, 15.28, 
	15.30, 15.32, 15.34, 15.36, 15.38, 15.40, 15.42, 15.44, 15.46, 15.48, 15.50, 15.52, 15.54, 
	15.56, 15.58, 15.60, 15.62, 15.64, 15.66, 15.68])
    
	log_nuLnu=np.array([      43.77927983, 43.82927983, 43.88927983, 43.93927983, 
	43.98927983, 44.03927983, 44.08927983, 44.12927983, 44.16927983, 44.20927983, 
	44.24927983, 44.27927983, 44.30927983, 44.33927983, 44.35927983, 44.38927983, 
	44.40927983, 44.42927983, 44.44927983, 44.46927983, 44.48927983, 44.50927983, 
	44.52927983, 44.54927983, 44.55927983, 44.57927983, 44.59927983, 44.60927983, 
	44.61927983, 44.62927983, 44.64927983, 44.65927983, 44.66927983, 44.67927983, 
	44.67927983, 44.68927983, 44.69927983, 44.70927983, 44.71927983, 44.71927983, 
	44.72827983, 44.73727983, 44.73727983, 44.74527983, 44.74527983, 44.75227983, 
	44.75227983, 44.75827983, 44.75727983, 44.76227983, 44.76127983, 44.76527983, 
	44.76327983, 44.76127983, 44.75927983, 44.76027983, 44.75727983, 44.75527983, 
	44.75427983, 44.75227983, 44.75127983, 44.75027983, 44.74927983, 44.74927983, 
	44.75027983, 44.75127983, 44.75327983, 44.75627983, 44.75827983, 44.76127983, 
	44.76427983, 44.76727983, 44.76927983, 44.77127983, 44.77327983, 44.77327983, 
	44.77227983, 44.77027983, 44.76627983, 44.76127983, 44.75527983, 44.74727983, 
	44.73827983, 44.72627983, 44.71427983, 44.70027983, 44.68627983, 44.67127983, 
	44.65727983, 44.64427983, 44.63227983, 44.62327983, 44.61527983, 44.61027983, 
	44.60727983, 44.60627983, 44.60727983, 44.61027983, 44.61427983, 44.61927983, 
	44.62627983, 44.63327983, 44.64227983, 44.65127983, 44.66227983, 44.67427983, 
	44.68727983, 44.70027983, 44.71127983, 44.71927983, 44.72527983, 44.73027983, 
	44.73727983, 44.74727983, 44.75927983, 44.77227983, 44.78627983, 44.79927983, 
	44.81227983, 44.82827983, 44.84727983, 44.86827983, 44.89127983, 44.91427983, 
	44.93627983, 44.95727983, 44.97427983, 44.98727983, 44.99527983, 45.00027983, 
	45.00227983, 45.00427983, 45.00927983, 45.01627983, 45.02627983, 45.03827983, 
	45.05027983, 45.06227983, 45.07327983, 45.08327983, 45.09227983, 45.10027983, 
	45.10627983, 45.10927983, 45.11927983, 45.12327983, 45.12527983, 45.12627983, 
	45.12927983, 45.13727983, 45.14727983, 45.13327983, 45.11927983, 45.10527983, 
	45.09127983, 45.07727983, 45.06327983, 45.04927983, 45.03527983, 45.02127983])

	#want the ratio with respect to the intrinsic B-band:
	nu_BB = 14.833657
	L_BB  = 44.793331
	log_nu_obs = np.log10(nu)
	nuLnu_obs = 0.

	if (log_nu_obs < log_nu[0]):   nuLnu_obs = log_nuLnu[0]
	if (log_nu_obs > log_nu[159]): nuLnu_obs = log_nuLnu[159]
	if ((log_nu_obs>=log_nu[0]) and (log_nu_obs<=log_nu[159])): 
		n0 = int((log_nu_obs-log_nu[0])/0.02)
		nuLnu_obs = log_nuLnu[n0] + (log_nuLnu[n0+1]-log_nuLnu[n0]) * ((log_nu_obs-log_nu[n0])/(log_nu[n0+1]-log_nu[n0]))

	return np.power(10.0,nuLnu_obs-L_BB)

# load the x-ray template, based on the observations in text and 
#     specifically the Magdziarz & Zdziarski 1995 PEXRAV model with Gamma=1.8/1.9/-1(stacked SED) , theta=2pi, solar abundances
def return_ratio_to_hard_xray(nu):
	gamma = -1

	log_nu=np.array([    16.00, 16.02, 16.04, 16.06, 16.08, 16.10, 16.12, 16.14, 16.16, 16.18, 
	16.20, 16.22, 16.24, 16.26, 16.28, 16.30, 16.32, 16.34, 16.36, 16.38, 16.40, 16.42, 16.44, 
	16.46, 16.48, 16.50, 16.52, 16.54, 16.56, 16.58, 16.60, 16.62, 16.64, 16.66, 16.68, 16.70, 
	16.72, 16.74, 16.76, 16.78, 16.80, 16.82, 16.84, 16.86, 16.88, 16.90, 16.92, 16.94, 16.96, 
	16.98, 17.00, 17.02, 17.04, 17.06, 17.08, 17.10, 17.12, 17.14, 17.16, 17.18, 17.20, 17.22, 
	17.24, 17.26, 17.28, 17.30, 17.32, 17.34, 17.36, 17.38, 17.40, 17.42, 17.44, 17.46, 17.48, 
	17.50, 17.52, 17.54, 17.56, 17.58, 17.60, 17.62, 17.64, 17.66, 17.68, 17.70, 17.72, 17.74, 
	17.76, 17.78, 17.80, 17.82, 17.84, 17.86, 17.88, 17.90, 17.92, 17.94, 17.96, 17.98, 18.00, 
	18.02, 18.04, 18.06, 18.08, 18.10, 18.12, 18.14, 18.16, 18.18, 18.20, 18.22, 18.24, 18.26, 
	18.28, 18.30, 18.32, 18.34, 18.36, 18.38, 18.40, 18.42, 18.44, 18.46, 18.48, 18.50, 18.52, 
	18.54, 18.56, 18.58, 18.60, 18.62, 18.64, 18.66, 18.68, 18.70, 18.72, 18.74, 18.76, 18.78, 
	18.80, 18.82, 18.84, 18.86, 18.88, 18.90, 18.92, 18.94, 18.96, 18.98, 19.00, 19.02, 19.04, 
	19.06, 19.08, 19.10, 19.12, 19.14, 19.16, 19.18, 19.20, 19.22, 19.24, 19.26, 19.28, 19.30, 
	19.32, 19.34, 19.36, 19.38, 19.40, 19.42, 19.44, 19.46, 19.48, 19.50, 19.52, 19.54, 19.56, 
	19.58, 19.60, 19.62, 19.64, 19.66, 19.68, 19.70, 19.72, 19.74, 19.76, 19.78, 19.80, 19.82, 
	19.84, 19.86, 19.88, 19.90, 19.92, 19.94, 19.96, 19.98, 20.00, 20.02, 20.04, 20.06, 20.08, 
	20.10, 20.12, 20.14, 20.16, 20.18, 20.20, 20.22, 20.24, 20.26, 20.28, 20.30, 20.32, 20.34, 
	20.36, 20.38, 20.40, 20.42, 20.44, 20.46, 20.48, 20.50, 20.52, 20.54, 20.56, 20.58, 20.60, 
	20.62, 20.64, 20.66, 20.68])

	if gamma == 1.9:
		log_nuLnu=np.array([      -2.74939131, -2.74739413, -2.74539709, -2.74340018, 
		-2.74140342, -2.73940681, -2.73741036, -2.73541408, -2.73341798, -2.73142206, 
		-2.72942633, -2.7274308,  -2.72543548, -2.72344039, -2.72144552, -2.7194509 , 
		-2.71745653, -2.71546242, -2.71346859, -2.71147506, -2.7094454 , -2.70745174, 
		-2.70545624, -2.70346077, -2.7014653 , -2.69946985, -2.6974743 , -2.69547866, 
		-2.69348287, -2.6914878,  -2.68949174, -2.68750083, -2.68550492, -2.68350866, 
		-2.68151196, -2.67951473, -2.67751709, -2.67551846, -2.67352042, -2.67152358, 
		-2.66952363, -2.66752107, -2.66551696, -2.6636271 , -2.66163263, -2.65963756, 
		-2.65764114, -2.65564594, -2.65364697, -2.65164616, -2.64969349, -2.64769452, 
		-2.64569387, -2.64369023, -2.64168355, -2.63967332, -2.63796538, -2.63598591, 
		-2.63400629, -2.63202579, -2.63004439, -2.62806182, -2.62607781, -2.6241433 , 
		-2.62216231, -2.62017952, -2.61820464, -2.61627485, -2.61429314, -2.61230851, 
		-2.61032092, -2.60833013, -2.60633277, -2.60432924, -2.60231836, -2.60029877, 
		-2.598342  , -2.59631062, -2.59426667, -2.59221777, -2.59014345, -2.58804943, 
		-2.58593255, -2.58401065, -2.58187108, -2.57970127, -2.57749662, -2.57525192, 
		-2.5729613 , -2.57089434, -2.56853542, -2.56611432, -2.56363137, -2.56106065, 
		-2.55839924, -2.55581044, -2.55295952, -2.5499831 , -2.5468665 , -2.54359394, 
		-2.54045238, -2.53685751, -2.53305847, -2.52903697, -2.52477475, -2.5202541 , 
		-2.5154584 , -2.51037271, -2.50498444, -2.49957472, -2.49358518, -2.48727727, 
		-2.50652787, -2.50182404, -2.49688929, -2.4916512 , -2.48704376, -2.48131374, 
		-2.47530115, -2.46900978, -2.46227256, -2.45457069, -2.44587192, -2.43683407, 
		-2.4279416 , -2.41861232, -2.4088512 , -2.39869916, -2.38823149, -2.37756327, 
		-2.36684647, -2.356258,   -2.34598238, -2.33619325, -2.32703954, -2.31863564, 
		-2.31105856, -2.30435147, -2.29852705, -2.29357469, -2.28946706, -2.28616685, 
		-2.28362848, -2.28183508, -2.28065493, -2.28012685, -2.28018964, -2.28079596, 
		-2.28192021, -2.28353073, -2.28560207, -2.28815593, -2.29141688, -2.29517505, 
		-2.2993112 , -2.30373525, -2.30850268, -2.31360901, -2.31904672, -2.32480665, 
		-2.33088227, -2.33727774, -2.34398137, -2.35099821, -2.35834983, -2.3660201 , 
		-2.37402266, -2.38238033, -2.39109627, -2.40018981, -2.40967808, -2.4195798 , 
		-2.42991527, -2.44070295, -2.45196133, -2.46370772, -2.47595515, -2.48871404, 
		-2.50198767, -2.51577489, -2.53006444, -2.54483747, -2.56007119, -2.57574201, 
		-2.59181393, -2.60824627, -2.62498894, -2.6420264 , -2.65939661, -2.67719703, 
		-2.69552368, -2.7144625,  -2.7340816 , -2.75444141, -2.77559822, -2.79760606, 
		-2.82051882, -2.84439044, -2.86927444, -2.89522802, -2.92230641, -2.95056818, 
		-2.98007363, -3.0108852,  -3.04306818, -3.07669046, -3.11182348, -3.14854185, 
		-3.18692377, -3.22705108, -3.2690096 , -3.31288966, -3.3587862 , -3.40679894, 
		-3.45703294, -3.50959924, -3.56461313, -3.6221968 , -3.68247863, -3.7455936 , 
		-3.81168349, -3.88089752, -3.95339231, -4.029332  , -4.10888702, -4.19223682, 
		-4.27956845, -4.37107723, -4.46696723, -4.56745129, -4.67275142, -4.7830977 , 
		-4.89873117, -5.0199034,  -5.14687719])
	elif gamma==1.8:
		log_nuLnu=np.array([      -2.88773339, -2.88373621, -2.87973917, -2.87574226, 
		-2.8717455,  -2.86774889, -2.86375244, -2.85975616, -2.85576006, -2.85176414, 
		-2.84776841, -2.84377288, -2.83977756, -2.83578247, -2.8317876 , -2.82779298, 
		-2.82379861, -2.81980450, -2.81581067, -2.81181714, -2.80778748, -2.80379383, 
		-2.79979832, -2.79580285, -2.79180738, -2.78781193, -2.78381638, -2.77982074, 
		-2.77582495, -2.77182988, -2.76783382, -2.76384291, -2.759847  , -2.75585074, 
		-2.75185404, -2.74785681, -2.74385917, -2.73986054, -2.7358625 , -2.73186566, 
		-2.72786571, -2.72386316, -2.71985904, -2.71596918, -2.71197471, -2.70797964, 
		-2.70398322, -2.69998802, -2.69598905, -2.69198825, -2.68803557, -2.6840366 , 
		-2.68003595, -2.67603231, -2.67202564, -2.6680154 , -2.66430746, -2.660328  , 
		-2.65634837, -2.65236787, -2.64838647, -2.6444039 , -2.64041989, -2.63648538, 
		-2.6325044 , -2.62852160, -2.62454672, -2.62061693, -2.61663522, -2.61265059, 
		-2.608663  , -2.60467221, -2.60067485, -2.59667132, -2.59266044, -2.58864085, 
		-2.58468408, -2.58065270, -2.57660875, -2.57255985, -2.56848553, -2.56439151, 
		-2.56027463, -2.55635273, -2.55221316, -2.54804335, -2.5438387 , -2.539594  , 
		-2.53530338, -2.53123642, -2.5268775 , -2.5224564 , -2.51797345, -2.51340273, 
		-2.50874132, -2.50415252, -2.4993016 , -2.49432518, -2.48920858, -2.48393602, 
		-2.47879446, -2.47319959, -2.46740055, -2.46137906, -2.45511683, -2.44859618, 
		-2.44180049, -2.43471479, -2.42732652, -2.41991681, -2.41192726, -2.40361935, 
		-2.42086995, -2.41416613, -2.40723137, -2.39999328, -2.39338584, -2.38565582, 
		-2.37764323, -2.36935186, -2.36059585, -2.35081861, -2.34000744, -2.32887218, 
		-2.31791417, -2.30650105, -2.29463064, -2.28233758, -2.26969238, -2.2568084 , 
		-2.24383967, -2.23096888, -2.21838888, -2.2062832 , -2.19481014, -2.18409234, 
		-2.17421401, -2.16522249, -2.15713364, -2.14993826, -2.14360972, -2.1381089 , 
		-2.13339087, -2.12940788, -2.126112  , -2.12345799, -2.1214052 , -2.11991329, 
		-2.11894878, -2.11848118, -2.11848314, -2.11897758, -2.12019006, -2.12190549, 
		-2.12400892, -2.12640603, -2.12915377, -2.13224687, -2.13567547, -2.13943498, 
		-2.14351325, -2.14791427, -2.15263474, -2.15766967, -2.16304538, -2.16874392, 
		-2.17478355, -2.18117649, -2.18793702, -2.19508163, -2.20262774, -2.21059589, 
		-2.21900454, -2.22788003, -2.23723569, -2.24709304, -2.25746607, -2.26836706, 
		-2.27980035, -2.29176612, -2.30425326, -2.3172423 , -2.33070917, -2.34462814, 
		-2.3589587 , -2.37365160, -2.3886446 , -2.40390914, -2.41947873, -2.43544533, 
		-2.45192034, -2.46899274, -2.48673403, -2.50520677, -2.52446884, -2.54457534, 
		-2.56558108, -2.58754065, -2.6105056 , -2.63454117, -2.65969529, -2.68602936, 
		-2.71360385, -2.74248130, -2.77272713, -2.80440928, -2.83759924, -2.87237167, 
		-2.90880474, -2.94698036, -2.98698431, -3.02890693, -3.07284317, -3.11889273, 
		-3.16716066, -3.21775803, -3.27080011, -3.32640915, -3.38471356, -3.44584854, 
		-3.50995559, -3.57718435, -3.64769167, -3.72164156, -3.79920496, -3.88056136, 
		-3.96589814, -4.05541081, -4.14930367, -4.24778979, -4.35109132, -4.45943854, 
		-4.57307261, -4.69224521, -4.81721921])
	elif gamma==-1:
		log_nuLnu=np.array([    2.62758968, 2.62703401, 2.62650587, 2.62600537, 
		2.62553256, 2.62508755, 2.62467041, 2.62428121, 2.62392006, 2.62358701, 
 		2.62328215, 2.62300556, 2.62275729, 2.62253744, 2.62234607, 2.62218324, 
 		2.62204905, 2.62194354, 2.62186679, 2.62181885, 2.62183622, 2.62184685, 
 		2.62188866, 2.62195986, 2.62206055, 2.62219076, 2.6223507 , 2.62254043, 
 		2.62276006, 2.62300882, 2.62328845, 2.62359292, 2.62393241, 2.62430234, 
 		2.62470286, 2.62513413, 2.62559609, 2.62608936, 2.62661246, 2.62716479, 
 		2.62775074, 2.62836985, 2.62902113, 2.62958881, 2.63029182, 2.6310262 , 
 		2.63179275, 2.63258893, 2.63341978, 2.63428342, 2.63512991, 2.63605373, 
 		2.63701031, 2.63800100, 2.63902587, 2.64008549, 2.64087404, 2.64196536, 
 		2.64308814, 2.64424312, 2.64543034, 2.64665013, 2.64790276, 2.64913733, 
 		2.65044983, 2.65179563, 2.65316501, 2.65452083, 2.65596013, 2.6574339 , 
 		2.65894221, 2.66048533, 2.66206662, 2.6636857 , 2.66534377, 2.6670422 , 
 		2.66870946, 2.67048299, 2.67230076, 2.67415515, 2.67606662, 2.67802948, 
 		2.68004688, 2.68190098, 2.68400441, 2.68616975, 2.6884016 , 2.69070515, 
 		2.69308628, 2.69527538, 2.69778808, 2.70039458, 2.70309454, 2.70591309, 
 		2.70885544, 2.71175596, 2.71495014, 2.71830134, 2.72182424, 2.72553457, 
 		2.72914534, 2.73324086, 2.73757194, 2.74215684, 2.74701383, 2.75216056, 
 		2.75761362, 2.76338792, 2.76949602, 2.77565673, 2.78242842, 2.78954959, 
 		2.77114331, 2.77672250, 2.78256359, 2.78873897, 2.79431457, 2.80104362, 
 		2.80808608, 2.81543806, 2.82327711, 2.83214469, 2.84206432, 2.85234854, 
 		2.86250194, 2.87313813, 2.88425866, 2.89582931, 2.90778036, 2.92000102, 
 		2.93233874, 2.94461346, 2.9566346 , 2.96822019, 2.97921293, 2.98949044, 
 		2.99896832, 3.00759842, 3.01536395, 3.02227297, 3.02835145, 3.03363681, 
 		3.03817353, 3.04200794, 3.04518798, 3.04775781, 3.04975761, 3.05122612, 
 		3.05219918, 3.05270424, 3.05276904, 3.05237057, 3.05128342, 3.04972125, 
 		3.04780025, 3.04561241, 3.04310136, 3.04027231, 3.03713504, 3.03369527, 
 		3.02995981, 3.02592948, 3.02160703, 3.01699508, 3.01207024, 3.00684614, 
 		3.00130637, 2.99543813, 2.98922648, 2.98265428, 2.97570402, 2.96835506, 
 		2.96058466, 2.95237289, 2.94369782, 2.93454   , 2.92488348, 2.91471341, 
 		2.90402492, 2.89281667, 2.88109713, 2.86888254, 2.85619782, 2.84307639, 
 		2.8295482 , 2.81567165, 2.80151661, 2.78712217, 2.77246407, 2.75744887, 
 		2.7419621 , 2.72591036, 2.70922002, 2.69182704, 2.67367258, 2.65470081, 
 		2.63485637, 2.61408420, 2.59232997, 2.56953541, 2.54564507, 2.52059977, 
 		2.4943389 , 2.46679981, 2.43791702, 2.40762251, 2.37584479, 2.34250904, 
 		2.30753736, 2.27084728, 2.23235357, 2.19196551, 2.14958832, 2.10512238, 
 		2.0584623 , 2.00949733, 1.95811214, 1.9041842 , 1.84758527, 1.78818005, 
 		1.72582692, 1.66037599, 1.59167042, 1.51954585, 1.44383123, 1.36434664, 
 		1.28090454, 1.19330908, 1.10135567, 1.00483092, 0.90351239, 0.79716958, 
 		0.68556106, 0.56843495, 0.44552819])

	#want the ratio with respect to the intrinsic 2-10 keV:
	if gamma == 1.9:
		L_HX  = -2.322773
	elif gamma == 1.8:
		L_HX  = -2.255724
	elif gamma == -1:
		L_HX = 2.9497451;

	log_nu_obs = np.log10(nu)
	nuLnu_obs = 0.

	if (log_nu_obs < log_nu[0]):   nuLnu_obs = log_nuLnu[0]
	if (log_nu_obs > log_nu[234]): nuLnu_obs = log_nuLnu[234]
	if ((log_nu_obs>=log_nu[0]) and (log_nu_obs<=log_nu[234])):
		n0 = int((log_nu_obs-log_nu[0])/0.02)
		nuLnu_obs = log_nuLnu[n0] + (log_nuLnu[n0+1]-log_nuLnu[n0]) * ((log_nu_obs-log_nu[n0])/(log_nu[n0+1]-log_nu[n0]))

	return np.power(10.0,nuLnu_obs-L_HX)

##Section 2: Quasar luminosity functions
# codes to get the best-fit bolometric QLFs and to get predicted QLFs in different bands

def return_bolometric_qlf(redshift, model='A'):
	if model=='A':
		#load the global fit A
		source = np.genfromtxt("../plots/Fit_parameters/codes/zevolution_fit_global.dat",names=True)
		zref = 2.
		p=source['value'][ source['paraid']==0 ]
		gamma1 = polynomial(redshift,p,2)
		p=source['value'][ source['paraid']==1 ]
		gamma2 = doublepower(redshift,(p[0],zref, p[1], p[2]))
		p=source['value'][ source['paraid']==2 ]
		logphi = polynomial(redshift,p,1) 
		p=source['value'][ source['paraid']==3 ]
		Lbreak = doublepower(redshift,(p[0],zref, p[1], p[2]))
		parameters_global = np.array([gamma1,gamma2,logphi,Lbreak])
	elif model=='B':
		#load the global fit B with shallow faint end slopes at high z
		source = np.genfromtxt("../plots/Fit_parameters/codes/zevolution_fit_global_shallowfaint.dat",names=True)
		zref = 2.
		p=source['value'][ source['paraid']==0 ]
		gamma1 = powerlaw_gamma1(redshift,(p[0],zref,p[1]))
		p=source['value'][ source['paraid']==1 ]
		gamma2 = doublepower(redshift,(p[0],zref,p[1],p[2]))
		p=source['value'][ source['paraid']==2 ]
		logphi = polynomial(redshift,p,1)
		p=source['value'][ source['paraid']==3 ]
		Lbreak = doublepower(redshift,(p[0],zref,p[1],p[2]))
		parameters_global = np.array([gamma1,gamma2,logphi,Lbreak])
	else: 
		print "model not found"
		exit()
	
	x = L_bol_grid + L_solar     #luminosities in log10
	y = LF(L_bol_grid,parameters_global)   #number densities in log10
	return x, y

def return_qlf_in_band(redshift, nu, model='A'):  #nu here has the same definitions as in Section 1
	if model=='A':
		#load the global fit A
		source = np.genfromtxt("../plots/Fit_parameters/codes/zevolution_fit_global.dat",names=True)
		zref = 2.
		p=source['value'][ source['paraid']==0 ]
		gamma1 = polynomial(redshift,p,2)
		p=source['value'][ source['paraid']==1 ]
		gamma2 = doublepower(redshift,(p[0],zref, p[1], p[2]))
		p=source['value'][ source['paraid']==2 ]
		logphi = polynomial(redshift,p,1) 
		p=source['value'][ source['paraid']==3 ]
		Lbreak = doublepower(redshift,(p[0],zref, p[1], p[2]))
		parameters_global = np.array([gamma1,gamma2,logphi,Lbreak])
	elif model=='B':
		#load the global fit B with shallow faint end slopes at high z
		source = np.genfromtxt("../plots/Fit_parameters/codes/zevolution_fit_global_shallowfaint.dat",names=True)
		zref = 2.
		p=source['value'][ source['paraid']==0 ]
		gamma1 = powerlaw_gamma1(redshift,(p[0],zref,p[1]))
		p=source['value'][ source['paraid']==1 ]
		gamma2 = doublepower(redshift,(p[0],zref,p[1],p[2]))
		p=source['value'][ source['paraid']==2 ]
		logphi = polynomial(redshift,p,1)
		p=source['value'][ source['paraid']==3 ]
		Lbreak = doublepower(redshift,(p[0],zref,p[1],p[2]))
		parameters_global = np.array([gamma1,gamma2,logphi,Lbreak])
	else: 
		print "model not found"
		exit()

	# compile the c code before using it!!!
	c_extenstion = CDLL("./clib/convolve.so")
	convolve_c = c_extenstion.convolve
	convolve_c.restype = ctypes.POINTER(ctypes.c_double * N_bol_grid)

	if nu==-5:
		L_1450 = bolometric_correction(L_bol_grid,-5)
		nu_c = c_double(-5)
		redshift_c = c_double(redshift)
		dtg_c = c_double(return_dtg(redshift))
		input_c= np.power(10.,LF(L_bol_grid,parameters_global)).ctypes.data_as(ctypes.POINTER(ctypes.c_double))
		res = convolve_c(input_c,nu_c,redshift_c,dtg_c)
		res = [i for i in res.contents]
		PHI_1450 = np.array(res,dtype=np.float64)  
		x = -2.5*( L_1450 + L_solar - np.log10(Fab*(con.c.value/1450e-10)) )  # convert lum to mag
		xm = x.copy()
		ym = np.log10(PHI_1450) - np.log10(2.5) # convert to number density per mag
		return xm, ym
	else:
		L_band = bolometric_correction(L_bol_grid,nu)
		nu_c = c_double(nu)
		redshift_c = c_double(redshift)
		dtg_c = c_double(return_dtg(redshift))
		input_c= np.power(10.,LF(L_bol_grid,parameters_global)).ctypes.data_as(ctypes.POINTER(ctypes.c_double))
		res = convolve_c(input_c,nu_c,redshift_c,dtg_c)
		res = [i for i in res.contents]
		PHI_HX = np.array(res,dtype=np.float64)
		x = L_HX + L_solar
		y = np.log10(PHI_HX)
		return x,y

#tests
#bol corr in a given band
print(bolometric_correction(12, -5))

#bol corr at a given frequency
print(bolometric_correction(12, 100))

#bol qlf at z=4
print(return_bolometric_qlf(4, model='B'))

#observed qlf at z=4 in a given band
print(return_qlf_in_band(4, -4, model='B'))
